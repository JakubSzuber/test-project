---

# TODO Description of the workflow

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:  # TODO maybe add to other jobs "need:" so the linting will be first executed instead of in parallel
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Run Super-Linter
      uses: github/super-linter@v4
      env:
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: master
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-push-docker:  # This job could be executed through the ubuntu, windows, and macOS hosted runners but it require additional changes
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ubuntu-22.04
    permissions:
      contents: read  # Obtain permission needed for actions/checkout to fetch code
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results
      pull-requests: write  # Obtain permission needed to create and update comments in PRs
    steps:
# TODO do below part after choosing the language
#     - name: Get the source code
#       uses: actions/checkout@v3

#     - name: Python Setup
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.9'
#         cache: 'pip' # caching pip dependencies

#     - run: pip install -r requirements.txt

#todo not sure about this part
#    - name: Run unit tests
#      run: |
#        python -m unittest discover tests/


    # TODO below action won't be required if you finishe the above part
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # TODO unit tests - make separate job for it and if it's possible run it in parallel
    
    # TODO integration tests (probably with docker compose) - make separate job for it and if it's possible run it in parallel

    # TODO CVE scanning (Snyk, Trivy, AWS CodeGuru) - make separate job for it and if it's possible run it in parallel

    # TODO maybe you should put somewhere else those part
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and export to Docker  # Test image building
      uses: docker/build-push-action@v4
      with:
        push: false
        load: true # Export to Docker Engine rather than pushing to a registry
        tags: ${{ github.run_id }}
        target: test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Unit Testing in Docker
      run: |
        docker run --rm ${{ github.run_id }} echo "run test commands here"  # TODO add here testing commands when you choose the language

    - name: Run Trivy for all CVEs (non-blocking)  # Gain an additional overview of the vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ github.run_id }}
        exit-code: 0
        format: table 

    - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ github.run_id }}
        exit-code: 1
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Docker meta  # Add multiple tags to the image
      id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: JakubSzuber/testing_image
        flavor: |
          latest=true
        tags: |
          type=semver,pattern={{version}},value=v1.0.0
          type=semver,pattern={{major}}.{{minor}},value=v1.0.0
          type=ref,event=pr  # TODO maybe delete this line
          type=sha
          type=schedule,pattern={{date 'YYYYMMDD-hhmmss' tz='GMT+1'}}

    - name: Build Docker image and push it if the event is direct push or merged pull request
      uses: docker/build-push-action@v4
      with:
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-from: type=gha  # Use cached image layers to reduce image building time
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64,linux/arm/v7

      # If PR, put image tags in the PR comments
      # from https://github.com/marketplace/actions/create-or-update-comment
    - name: Find comment for image tags
      uses: peter-evans/find-comment@v2
      if: github.event_name == 'pull_request'
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Docker image tag(s) pushed

      # If PR, put image tags in the PR comments
    - name: Create or update comment for image tags
      uses: peter-evans/create-or-update-comment@v2
      if: github.event_name == 'pull_request'
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Docker image tag(s) pushed:
          ```text
          ${{ steps.docker_meta.outputs.tags }}
          ```
          Labels added to images:
          ```text
          ${{ steps.docker_meta.outputs.labels }}
          ```
        edit-mode: replace
