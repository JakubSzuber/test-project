---
# Deploy to staging environment and do smoke tests

name: CD

concurrency: staging

onn:  # Trigger automatically on integration.yml success (merged pull request or direct push)
  workflow_dispatch:
  workflow_run:
    workflows: [CI]
    types: [completed]
#     branches:
#       - main

env:
  AWS_REGION: us-east-2
  ECS_SERVICE: my-service
  ECS_CLUSTER: initial-cluster
  ECS_TASK_DEFINITION: .aws/ecs-task-definition.json
  CONTAINER_NAME: some-nginx

jobs:
  # Only trigger if the previous workflow run was successful and the event was not a pull request
  deploy-to-ec2:
    if: >-
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

#  XXXXXXXXXXXXXXXXXXXXXXXXXX
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: docker.io/jakubszuber/testing_image  # TODO change the imageXXXXXXXXXXXXXXXXXXXXXXXXXX

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          
          
#   - name: Echo Working
#     run: echo "Working!"

#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Extract Docker image tag
#         id: extract-tag
#         uses: docker/metadata-action@v3
#         with:
#           images: my-image
#           tags: ${{ github.event.client_payload.tag }}

#       - name: Deploy Docker container to EC2 instance
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           port: ${{ secrets.EC2_PORT }}
#           script: |
#             docker stop my-container || true
#             docker rm my-container || true
#             docker pull my-image:${{ steps.extract-tag.outputs.tags }}
#             docker run -d --name my-container -p 80:80 my-image:${{ steps.extract-tag.outputs.tags }}
